{% extends 'base.html.twig' %}

{% block title %}Mes Vidéos{% endblock %}

{% block body %}
<style>
    body {
        background-color: var(--color-bg);
        color: white;
        font-family: Arial, sans-serif;
        text-align: center;
        padding-top: 100px; /* Ajuster pour compenser la navbar fixe */
    }

    .video-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin: 0 auto;
        max-width: 1200px;
        padding: 20px;
    }

    .video-card {
        background-color: #2a2526; /* Une teinte légèrement plus claire que le fond global */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        max-width: 350px;
        text-align: left;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .video-card:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
    }

    .video-header {
        background-color: var(--color-tertiary); /* Couleur plus douce pour un bon contraste */
        padding: 15px;
        text-align: center;
    }

    .video-header h2 {
        color: white;
        font-size: 1.5rem;
        margin: 0;
    }

    .video-body {
        padding: 15px;
    }

    .video-body p {
        margin: 5px 0;
        color: #ccc; /* Une teinte plus douce pour le texte */
    }

    .video-body a {
        text-decoration: none;
        color: var(--color-accent); /* Couleur d'accentuation douce */
        font-weight: bold;
    }

    .video-body a:hover {
        color: var(--color-primary); /* Une couleur plus lumineuse pour l'interaction */
    }

    .no-videos {
        font-size: 1.2rem;
        margin-top: 50px;
        color: #aaa; /* Texte grisé pour une indication subtile */
    }

    .btn-small {
        padding: 8px 15px; /* Réduction des marges intérieures */
        margin-left : 20px;
        text-transform: uppercase;
        font-weight: bold;
        max-width: 250px; /* Le bouton s'ajuste automatiquement au contenu */
        min-width: 100px; /* Optionnel : largeur minimale pour uniformité */
    }

    /* Style pour le bouton Ajouter une vidéo */
    .btn-outline-light {
        transition: background-color 0.3s, border-color 0.3s, color 0.3s;
        border-color: var(--color-primary);
        color: var(--color-primary);
        animation: colorChange 5s infinite;
    }

    /* Animation des couleurs */
    @keyframes colorChange {
        0% {
            background-color: var(--color-primary); /* Couleur initiale */
            border-color: var(--color-primary);
            color: #ffffff;
        }
        33% {
            background-color: var(--color-secondary); /* Deuxième couleur */
            border-color: var(--color-secondary);
            color: #ffffff;
        }
        66% {
            background-color: var(--color-accent); /* Troisième couleur */
            border-color: var(--color-accent);
            color: #ffffff;
        }
        100% {
            background-color: var(--color-primary); /* Retour à la couleur initiale */
            border-color: var(--color-primary);
            color: #ffffff;
        }
    }

/* Interaction au survol */
.btn-outline-light:hover {
    background-color: var(--color-primary);
    color: #ffffff;
    border-color: var(--color-primary);
}

.video-actions {
    display: flex;
    justify-content: space-around;
    padding: 10px;
}

.video-actions a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

/* Conteneur des actions vidéo */
.video-actions {
    display: flex;
    justify-content: center; /* Centrer les actions */
    gap: 15px; /* Espacement entre les boutons */
    margin-top: 10px;
}

/* Style des boutons */
.video-actions a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    font-size: 18px; /* Taille des icônes */
    transition: background-color 0.3s, transform 0.2s ease, box-shadow 0.2s ease;
    text-decoration: none;
}

/* Bouton Modifier */
.video-actions a.btn-outline-light {
    border: 2px solid var(--color-primary); /* Bordure de couleur */
    color: var(--color-primary);
}

/* Bouton Supprimer */
.video-actions a.btn-danger {
    background-color: var(--color-accent);
    color: white;
    border: 2px solid var(--color-accent);
}

/* Effet de survol */
.video-actions a:hover {
    transform: scale(1.1); /* Agrandir au survol */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Ombre discrète */
}

/* Changer la couleur de l'icône au survol */
.video-actions a:hover i {
    color: #ffffff; /* Les icônes deviennent blanches au survol */
}

/* Changer la couleur du bouton Modifier au survol */
.video-actions a.btn-outline-light:hover {
    background-color: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
}

/* Changer la couleur du bouton Supprimer au survol */
.video-actions a.btn-danger:hover {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
}

iframe {
        width: 100%;
        height: 200px;
    }

</style>

<h1 style="color: #ffffff;">Mes Vidéos</h1>

<a href="{{ path('app_video') }}" class="btn btn-outline-light btn-small mt-5">Ajouter une vidéo</a>
<div class="video-container">
    {% for laVideo in lesVideos %}
        <div class="video-card">
            <div class="video-header">
                <h2>{{ laVideo.titre }}</h2>
            </div>
            <div class="video-body">
                <a href="{{path('ficheVideo', { id: laVideo.id })}}" target="_blank">
                    <img src="https://img.youtube.com/vi/{{ laVideo.youtubeId }}/0.jpg" alt="Aperçu de la vidéo {{ laVideo.titre }}" width="300">
                 </a>
                {# {% if laVideo.youtubeId %}
                    <iframe src="https://www.youtube.com/embed/{{ laVideo.youtubeId }}" allowfullscreen></iframe>
                {% else %}
                    <p>Lien : <a href="{{ laVideo.lien }}" target="_blank">{{ laVideo.lien }}</a></p>
                {% endif %} #}
                <p><strong>Créateur :</strong> {{ laVideo.createur }}</p>
                <p><strong>Date de publication :</strong> {{ laVideo.datePublication|date('d/m/Y H:i') }}</p>
            </div>

            <div class="video-actions">
                <a href="{{ path('app_video_modif', { id: laVideo.id }) }}" 
                   class="btn btn-outline-light btn-small" title="Modifier">
                    <i class="fas fa-pencil-alt"></i>
                </a>
                <a href="{{ path('app_video_suppr', { id: laVideo.id }) }}" 
                   class="btn btn-danger btn-small" 
                   title="Supprimer" 
                   onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette vidéo ?');">
                    <i class="fas fa-trash-alt"></i>
                </a>
            </div>
        </div>
    {% else %}
        <p class="no-videos">Aucune vidéo enregistrée pour le moment.</p>
    {% endfor %}
</div>

{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const likeButtons = document.querySelectorAll('.like-btn');

            function updateButtonState(likeBtn, data) {
                const likeCount = likeBtn.querySelector('.like-count');
                likeCount.textContent = data.likes;
                likeBtn.classList.toggle('active', data.isLiked);
                likeBtn.disabled = false;
            }

            function handleLikeAction(button) {
                const videoId = button.dataset.videoId;
                const likeBtn = document.getElementById(`like-btn-${videoId}`);

                likeBtn.disabled = true;

                fetch(`/video/${videoId}/like`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur réseau');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        updateButtonState(likeBtn, data);
                    } else {
                        throw new Error(data.message || 'Une erreur est survenue');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Une erreur est survenue lors de l\'action');
                    likeBtn.disabled = false;
                });
            }

            likeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    handleLikeAction(this);
                });
            });
        });
    </script>
{% endblock %}
