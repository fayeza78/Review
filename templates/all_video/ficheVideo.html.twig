{% extends 'base.html.twig' %}

{% block title %}Review | {{ laVideo.titre }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/comments.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
{% endblock %}

{% block body %}
<style>
    body {
        margin-top: 150px;
        background-color: #121212; /* Fond sombre, type Netflix/YouTube */
        color: #ffffff; /* Texte clair pour contraste */
        font-family: 'Arial', sans-serif;
    }

    .container {
        margin: 0 auto;
        max-width: 1200px;
        padding: 20px;
    }

    .back-button {
        top: 20px;
        left: 20px;
        background-color: #5c19c4;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .back-button:hover {
        background-color: #730db8;
        color: #ffffff;
        text-decoration: none;
    }

    .video-header {
        text-align: left;
        margin-bottom: 30px;
    }

    .video-header h1 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #ffffff;
    }

    .video-content {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
    }

    .video-card {
        background-color: #1f1f1f; /* Fond des cartes */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        max-width: 400px;
        text-align: left;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .video-card:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
    }

    .video-card img {
        width: 100%;
        height: auto;
        display: block;
    }

    .video-details {
        padding: 15px;
    }

    .video-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #ffffff;
        margin-bottom: 10px;
    }

    .video-info {
        font-size: 0.9rem;
        color: #b3b3b3; /* Couleur grisée pour infos secondaires */
    }

    .video-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
    }

    .video-actions a {
        text-decoration: none;
        padding: 10px 15px;
        border-radius: 5px;
        color: #ffffff;
        font-weight: bold;
        text-align: center;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    
    iframe {
        width: 100%;
        height: 575px;
        border: none;
    }

    .comments-section {
        margin-top: 50px;
        padding: 20px;
        background-color: #1f1f1f;
        border-radius: 10px;
        color: #ffffff;
    }

    .comments-section h2 {
        font-size: 1.5rem;
        color: #ffffff;
        margin-bottom: 20px;
    }

    .suggestions {
        margin-top: 50px;
    }

    .suggestions h2 {
        font-size: 1.5rem;
        color: #ffffff;
        margin-bottom: 20px;
    }

    .suggestions .video-content {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .suggestions .video-card {
        background-color: #1f1f1f;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        max-width: 300px;
        text-align: left;
        margin: 10px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .suggestions .video-card:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
    }

    .suggestions .video-card img {
        width: 100%;
        height: auto;
    }

    .suggestions .video-title {
        font-size: 1rem;
        font-weight: bold;
        color: #ffffff;
        padding: 10px;
    }

    .like-btn {
        background-color: #5c19c4;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .like-btn:hover {
        background-color: #730db8;
        color: #ffffff;
        text-decoration: none;
    }

    .like-btn.active {
        background-color: #730db8;
        color: #ffffff;
    }
</style>

<div class="container">
    <a href="{{ path('app_listeallvideo') }}" class="back-button mt-3">← Retour</a>

    <div class="video-header mt-3">
        <h1>{{ laVideo.titre }}</h1>
    </div>

    <div class="video-content">
        {% if laVideo.youtubeId %}
            <iframe width="100%" height="400" src="https://www.youtube.com/embed/{{ laVideo.youtubeId }}" frameborder="0" allowfullscreen></iframe>
        {% else %}
            {{ laVideo.lien|raw }}
        {% endif %}
        <div class="video-actions" style="text-align: right; margin-top: 10px;">
            <button class="like-btn {% if app.user and laVideo.getLikeVideo().contains(app.user) %}active{% endif %}" 
                    id="like-btn-{{ laVideo.id }}" 
                    data-video-id="{{ laVideo.id }}"
                    title="J'aime">
                <i class="fas fa-thumbs-up"></i>
                <span class="like-count">{{ laVideo.likesCount }}</span>
            </button>
        </div>
    </div>

    {# Messages Flash #}
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} alert-dismissible fade show mt-3" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <div class="video-details">
        <h2 class="video-title">{{ laVideo.titre }}</h2>
        <p class="video-info"><strong>Créateur :</strong> {{ laVideo.createur }}</p>
        <p class="video-info"><strong>Date de publication :</strong> {{ laVideo.datePublication|date('d/m/Y H:i') }}</p>
    </div>

    {# Section des commentaires #}
    <div class="comments-container mt-4">
        <h2 class="text-white mb-4">Commentaires</h2>
        {{ render(controller('App\\Controller\\CommentaireController::listComments', {'id': laVideo.id})) }}
    </div>

    <div class="suggestions">
    <h2>Suggestions de vidéos</h2>
    <div class="video-content">
        {% for laVideo in lesVideos|slice(0, 3)  %}
            <div class="video-card">
                <a href="{{path('allficheVideo', { id: laVideo.id })}}" target="_blank">
                    <img src="https://img.youtube.com/vi/{{ laVideo.youtubeId }}/0.jpg" alt="Aperçu de la vidéo {{ laVideo.titre }}" width="300">
                 </a>
                <div class="video-title">{{ laVideo.titre }}</div>
            </div>
        {% endfor %}
    </div>
</div>

</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/comment-likes.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const likeButton = document.getElementById(`like-btn-{{ laVideo.id }}`);

            function updateButtonState(likeBtn, data) {
                const likeCount = likeBtn.querySelector('.like-count');
                likeCount.textContent = data.likes;
                likeBtn.classList.toggle('active', data.isLiked);
                likeBtn.disabled = false;
            }

            likeButton.addEventListener('click', function() {
                const videoId = this.dataset.videoId;
                this.disabled = true;

                fetch(`/video/${videoId}/like`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur réseau');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        updateButtonState(this, data);
                    } else {
                        throw new Error(data.message || 'Une erreur est survenue');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Une erreur est survenue lors de l\'action');
                    this.disabled = false;
                });
            });
        });
    </script>
{% endblock %}
